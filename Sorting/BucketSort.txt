(✷‿✷)
* Uses Hashing
* Makes assumption about the data, like radix and counting sort
* Because it makes assumptions, can sort in O(n) time
* Performs best when hashed values of items being sorted are evenly distributed, so there aren't many collisions

How does it works?
    1. Distribute the items into buckets based on their hashed values(scattering phase)
    2. Sort the items in each bucket
    3. Merge the bucket - can just concatenate them(gathering phase)
    Note:
        * The values in bucket X must be greater than the values in bucket X-1 and less than the values in bucket X+1
        * This means that the hash function we use must meet this requirement
    A generalization counting sort

* Not in-place
* Stability will depend on sort algorithm used to sort the buckets - ideally, you want a stable sort
* To achieve O(n), must have only one item per bucket
* Insertion sort is often used to sort the buckets, because it is fast when no. of items is small

